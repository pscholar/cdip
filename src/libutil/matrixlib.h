void mathlib_matrixlib_addition( double **A, double **B, double **C, size_t M, size_t N );
void mathlib_matrixlib_copy(double **src, double **dest, size_t M, size_t N);
void mathlib_matrixlib_copy_pointers(double *src, double **dest, size_t M, size_t N);
void mathlib_matrixlib_transpose(double *A, double *B, size_t M, size_t N);
void mathlib_matrixlib_addition( double **A, double **B, double **C, size_t M, size_t N );
void mathlib_matrixlib_addition_scalar( double **A, double **B, double **C, double k_A, double k_B,size_t M, size_t N );
void mathlib_matrixlib_subtraction( double **A, double **B, double **C, size_t M, size_t N );
void mathlib_matrixlib_subtraction_scalar( double **A, double **B, double **C, double k_A, double k_B,size_t M, size_t N );
void mathlib_matrixlib_scalar_multplication( double **A, double **B, double k,size_t M, size_t N);
void mathlib_matrixlib_elem_multplication( double **A, double **B, double **C,size_t M, size_t N);
void mathlib_matrixlib_elem_multplication_scalar( double **A, double **B, double **C, double k_A, double k_B,size_t M, size_t N);
void mathlib_matrixlib_multiplication(double **A, double **B, double **C,size_t M, size_t N, size_t R);
void mathlib_matrixlib_multiplication_scalar(double **A, double **B, double **C,double k_A, double k_B, size_t M, size_t N, size_t R);
double mathlib_matrixlib_trace(double **A, size_t M);
double** mathlib_matrixlib_create_unit(size_t M);
void mathlib_matrixlib_swaprow(double **A,size_t M,size_t index, double *mul_factor);
double  mathlib_matrixlib_row_reduction(double **A, size_t M,size_t N);
double mathlib_matrixlib_det(double **A, size_t M);
void mathlib_matrixlib_native_swaprow(double **A,double **B,size_t M,size_t index);
void mathlib_matrixlib_gaussreduction(double **A,double **B,size_t M,size_t N);
double** mathlib_matrixlib_inverse(double **A, size_t M);
size_t mathlib_matrix_rank(double **A, size_t M);
void mathlib_matrix_linear_comb(double **A, double **B, double **C, double k_A, double k_B,size_t start_i,size_t start_j,size_t end_i,size_t end_j);
double** mathlib_matrixlib_create_zero(int m, int n);
void mathlib_matrixlib_printarray(double **A, int M, int N);
void mathlib_matrixlib_vector_multiplication(double *w, double *v,double **r ,int m, int n);
FILE* mathlib_store_matrix(double ***matrix, size_t rows, size_t cols, int n, char *filename);
double** mathlib_retrieve_matrix_channel(size_t * rows, size_t *cols, int *n ,FILE *fp);
double*** mathlib_matrix_retrieve_matrix(size_t * rows, size_t *cols, int *n ,FILE *fp);